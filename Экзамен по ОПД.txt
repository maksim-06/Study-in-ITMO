1. Две формы представления информации. Способы представления
дискретной информации. Системы счисления, используемые в
вычислительной технике: двоичная, 8-я, 10-я, 16-я, двоично-десятичная.

Формы представления информации и системы счисления
Аналоговая (непрерывная) форма

Информация представляется в виде непрерывного сигнала (например, звук на виниловой пластинке, цвет на картине).

Может принимать бесконечное количество значений в заданном диапазоне.

Используется в аналоговых вычислительных системах.

Цифровая (дискретная) форма

Информация представляется в виде набора дискретных значений (например, пиксели на изображении, данные на CD-диске).

Количество возможных значений конечно.

Используется в электронных вычислительных машинах (ЭВМ).

Способы представления дискретной информации
В вычислительной технике применяются следующие системы счисления:

Двоичная (2-я) – основная система в ЭВМ (использует 0 и 1).

Восьмеричная (8-я) и шестнадцатеричная (16-я) – удобны для сокращённой записи двоичных чисел.

Десятичная (10-я) – привычная для человека, но неудобная для машин.

Двоично-десятичная (2-10) – используется в устройствах с десятичным выводом (каждая цифра 0-9 кодируется 4 битами).

Основные термины
Бит – минимальная единица информации (0 или 1).

Байт – 8 бит (может представлять две двоично-десятичные цифры).

Слово – группа битов, обрабатываемая процессором как единое целое.
-----------------------------------------------------------------------------------------------------------------------------

2. Представление чисел с фиксированной точкой. Прямой, обратный и
дополнительный код. Формирование битовых признаков переноса,
переполнения, отрицательного результата, нуля.

Представление чисел с фиксированной точкой. Коды и битовые признаки
1) Числа с фиксированной точкой
Фиксированная позиция запятой (обычно после младшего разряда).

Беззнаковые числа:

Диапазон для 16-битного слова: 0 (0000h) до 65535 (FFFFh).

Числа со знаком:

Старший бит определяет знак (0 – "+", 1 – "–").

Используется дополнительный код.

2) Прямой, обратный и дополнительный коды
Прямой код – обычное двоичное представление (для положительных чисел).

Обратный код – инверсия всех битов прямого кода.

Дополнительный код (используется в ЭВМ):

Для отрицательных чисел:

Инверсия битов модуля числа (обратный код).

Прибавление 1 к результату.

Пример (8 бит):

-5 → Прямой код 00000101 → Обратный 11111010 → Дополнительный 11111011.

3) Битовые признаки (флаги)
Перенос (Carry, C) – возникает при переполнении беззнакового числа (выход за 16 бит).

Пример: 65535 + 1 = 0 (с переносом в 17-й разряд).

Переполнение (Overflow, OV) – возникает при неверном знаковом результате.

Пример: 32767 + 1 = -32768 (знак не совпадает с ожидаемым).

Отрицательный результат (Negative, N) – 1 в старшем бите (число отрицательное).

Нулевой результат (Zero, Z) – все биты 0.
-----------------------------------------------------------------------------------------------------------------------------

3. Представление символьных и строковых данных. Принципы построения кодовых таблиц ASCII, КОИ-8, ISO-8859-5, Windows-1251, UTF-8, UTF-16.

ASCII
7-битная кодировка (128 символов), содержит латинские буквы, цифры, знаки препинания и управляющие символы. Совместима с большинством кодировок в своей нижней части (0–127).

КОИ-8
8-битная кодовая страница, совместимая с ASCII. Русские буквы расположены в верхней части (128–255) так, что их позиции соответствуют фонетически схожим латинским буквам. Например, при отбрасывании старшего бита кириллица превращается в подобие транслита (например, «Русский» → «rUSSKIJ»).

ISO-8859-5
8-битная кодировка из семейства ISO-8859 для кириллицы. Нижняя часть (0–127) совпадает с ASCII, а верхняя (128–255) содержит русские буквы в алфавитном порядке. Недостатки: отсутствие некоторых типографских символов (например, «—», ««»», «°»), из-за чего в России почти не использовалась.

Windows-1251
8-битная кодировка, стандартная для русских версий Windows. Содержит почти все необходимые для русского языка символы, включая типографские. Недостатки:

Строчная «я» имеет код 0xFF (255), что может конфликтовать с управляющими символами в других кодировках.

Отсутствует псевдографика, которая есть в CP866 и KOI-8.

UTF-8
Универсальная кодировка с переменной длиной символов (1–4 байта). Совместима с ASCII (первые 128 символов кодируются одним байтом). Остальные символы используют многобайтовую схему:

1 байт: 0xxx xxxx (ASCII)

2 байта: 110x xxxx 10xx xxxx

3 байта: 1110 xxxx 10xx xxxx 10xx xxxx

4 байта: 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx

Преимущество: компактность для латиницы и совместимость со старыми системами.

UTF-16
Использует 2 или 4 байта на символ. Основная кодировка в Windows и Java. Символы из базовой плоскости Unicode (U+0000–U+FFFF) кодируются двумя байтами, остальные — четырьмя (суррогатные пары).
-----------------------------------------------------------------------------------------------------------------------------

4. Базовые элементы вычислительной техники
1) Ячейка памяти
Минимальный адресуемый элемент запоминающего устройства ЭВМ, имеющий уникальный адрес. Состоит из элементов с двумя устойчивыми состояниями (например, заряжен/разряжен конденсатор, открыт/закрыт транзистор), которые кодируются как 0 или 1.

Типы памяти:

Статическая (SRAM) – хранит данные в триггерах с обратной связью, не требует регенерации, но энергозависима. Используется в кэш-памяти.

Динамическая (DRAM) – хранит данные в виде заряда конденсатора, требует периодической регенерации. Организована в виде страниц и банков.

2) Регистры
Быстрая память внутри процессора для хранения адресов, промежуточных результатов вычислений и управляющих данных. Имеют фиксированную разрядность (например, 32/64 бита). При чтении создается копия содержимого, оригинал сохраняется.

3) Шины
Электрические соединения для передачи данных между компонентами ЭВМ. Состоят из:

Проводов данных (передают биты)

Линий управления (синхронизация, направление передачи)

Линий адреса (выбор ячейки памяти)

Могут быть однонаправленными или двунаправленными.

4) Вентили
Электронные ключевые схемы с двумя входами (данные и управление) и одним выходом. Пропускают данные только при активном управляющем сигнале (1).

5) Тактовый генератор
Генерирует синхронизирующие импульсы прямоугольной формы для координации работы всех компонентов ЭВМ.

6) Логические схемы
Комбинации базовых логических элементов (И, ИЛИ, НЕ), выполняющих операции булевой алгебры.

7) Триггеры
Элементы с двумя устойчивыми состояниями (0 и 1), сохраняющие состояние после снятия входного сигнала.

Основные типы:

RS-триггер – имеет входы Set (установка 1) и Reset (сброс в 0)

D-триггер – запоминает значение на входе D по тактовому сигналу

T-триггер – меняет состояние на противоположное при каждом импульсе

8) Счетчики
Устройства на основе триггеров, подсчитывающие количество входных импульсов. Основной параметр – модуль счета (максимальное число перед сбросом).

9) Сумматоры
Сумматор—устройство, преобразующее информационные сигналы в сигнал, эквивалентный сумме этих сигналов.
-----------------------------------------------------------------------------------------------------------------------------
5. Структура и принцип функционирования ЭВМ (+ Картинка - канкулятор)
Основные компоненты ЭВМ
Процессор (CPU) – центральное устройство, выполняющее обработку данных. Состоит из:

Устройства управления (УУ) – выбирает команды из памяти и управляет их выполнением.

Арифметико-логического устройства (АЛУ) – выполняет вычисления и логические операции.

Регистров – временное хранилище данных и состояний процессора (например, аккумулятор).

Схем управления – обеспечивают связь с памятью и устройствами ввода-вывода.

Память – хранит команды и данные. Организована в виде ячеек, каждая из которых содержит:

Двоичные данные (0 или 1).

Адрес – уникальный номер для доступа к содержимому.

Устройства ввода (клавиатура, мышь) – преобразуют внешние сигналы в данные, понятные ЭВМ.

Устройства вывода (монитор, принтер) – отображают результаты обработки.
-------------------------------------------------------------------------------------------------------------------------------------------------------
6. Операционная система Unix: ядро и файловая система  

**UNIX** — семейство переносимых, многозадачных и многопользовательских операционных систем, оказавших значительное влияние на развитие ОС.  

**Ключевые особенности UNIX:**  
1. **Многопользовательский и многозадачный режим** – множество пользователей могут одновременно выполнять множество процессов на одном компьютере.  
2. **Мультиплатформенность** – ядро адаптируется под различные процессоры.  
3. **Использование текстовых файлов** для конфигурации и управления.  
4. **Работа через командную строку** и виртуальные терминалы.  
5. **Представление устройств и процессов в виде файлов**.  
6. **Конвейеры (pipes)** – объединение простых программ для выполнения сложных задач.  

**Файловая система UNIX**  
- Имеет **древовидную структуру**, где корень (`/`) – начальный каталог.  
- Каждый файл и каталог имеет **уникальный полный путь**.  
- **Относительный путь** указывается от текущего рабочего каталога.  
- В каждом каталоге есть две специальные ссылки:  
  - `.` – ссылка на текущий каталог,  
  - `..` – ссылка на родительский каталог.  
- **inode (Index-node)** – уникальный идентификатор файла, хранящий метаданные (тип, права доступа, время изменения и др.), но не имя или данные файла.  
-------------------------------------------------------------------------------------------------------------------------------------------------------
7. Операционная система Unix: интерпретаторы, стандартные потоки ввода-вывода, фильтры  

**Командный интерпретатор (оболочка, shell)**  
- Программа, обеспечивающая взаимодействие пользователя с системой через командную строку.  
- Переводит команды в понятный системе формат.  
- Популярные оболочки:  
  - **sh** (Bourne Shell)  
  - **ksh** (Korn Shell)  
  - **bash** (Bourne Again Shell, стандарт в Unix)  
  - **csh** (C Shell)  
- Позволяет выполнять команды по одной или в виде скриптов.  
- Поддерживает вызов системных утилит, управляющих конструкций и перенаправление потоков.  
- Фактически является средой программирования для автоматизации задач.  

**Стандартные потоки ввода-вывода**  
- Механизм взаимодействия программ с пользователем и другими процессами.  
- Три основных потока:  
  - **stdin (0)** – стандартный ввод (по умолчанию – клавиатура).  
  - **stdout (1)** – стандартный вывод (по умолчанию – терминал).  
  - **stderr (2)** – поток ошибок (по умолчанию также выводится в терминал).  
- Потоки можно перенаправлять в файлы, устройства или другие программы.  

**Перенаправление потоков**  
- **`>`** – запись вывода в файл (перезапись).  
- **`>>`** – добавление вывода в конец файла.  
- **`<`** – чтение ввода из файла.  
- **`|` (конвейер)** – передача вывода одной программы на вход другой.  
- **`2>`** – перенаправление потока ошибок в файл.  
- **`2>&1` или `&>`** – объединение stdout и stderr.  
- **`/dev/null`** – "чёрная дыра" для игнорирования вывода или ошибок.  

**Фильтры и конвейеры**  
- Фильтры – утилиты, обрабатывающие текстовые данные (например, `grep`, `sed`, `awk`).  
- Конвейеры (`|`) позволяют комбинировать команды, передавая вывод одной программы на вход другой.  
- Пример:  
  ```sh
  cat file.txt | grep "pattern" | sort > result.txt  
  ```  
  (чтение файла → поиск строк → сортировка → сохранение результата).  
-------------------------------------------------------------------------------------------------------------------------------------------------------
8. Операционная система Unix — основные команды и права файлов
Основные команды
Файловые операции

touch файл — создает пустой файл или обновляет время его модификации.

mkdir каталог — создает каталог.

rm файл — удаляет файл.

-r — рекурсивное удаление (включая каталоги).

rmdir каталог — удаляет пустой каталог.

Просмотр и навигация

pwd — выводит текущий каталог.

ls — выводит список файлов.

-l — подробный вывод (права, владелец, размер).

-a — показывает скрытые файлы.

-R — рекурсивный обход подкаталогов.

cd каталог — переход в указанный каталог.

Работа с содержимым файлов

cat файл — выводит содержимое файла.

head/tail файл — выводит начало/конец файла.

-n — количество строк.

wc файл — подсчет строк, слов и байт.

-l — только строки.

-w — только слова.

Копирование, перемещение и ссылки

cp файл1 файл2 — копирование.

mv файл каталог — перемещение.

ln файл1 файл2 — создание жесткой ссылки.

-s — создание символической ссылки.

Поиск и справка

find выражение — поиск файлов.

man команда — справка по команде.

Права доступа к файлам
Категории пользователей

u (user) — владелец.

g (group) — группа.

o (others) — остальные.

a (all) — все категории.

Типы прав

r (read) — чтение.

w (write) — запись.

x (execute) — выполнение.

Способы записи прав

Символьный (например, rwxr-xr--).

Числовой (восьмеричный, например, 755).

Изменение прав (chmod)

Символьный формат:

chmod u+x файл — добавить выполнение владельцу.

chmod g-w файл — убрать запись у группы.

Числовой формат:

chmod 755 файл — rwxr-xr-x.

Копирование прав:

chmod g=u файл — скопировать права владельца в группу.
-------------------------------------------------------------------------------------------------------------------------------------------------------
9. Состав и структура БЭВМ. Адресные пространства. Система команд. Машинные циклы
1) Состав и структура БЭВМ
Базовая ЭВМ (БЭВМ) – упрощенная модель вычислительной машины, отражающая основные принципы работы реальных ЭВМ.

Память:

Состоит из 2048 ячеек (по 16 бит каждая).

Ячейки 000–00F зарезервированы под векторы прерываний.

Ячейки 008–00F – индексные регистры (используются в циклических операциях).

Процессор:

Регистры:

AC (Аккумулятор) – основной регистр для арифметико-логических операций.

BR – обычно хранит адрес выполняемой команды.

PS (Регистр состояния) – содержит флаги (переполнение, нулевой результат и др.).

IR (Клавишный регистр) – используется для ввода данных.

DR – хранит данные из памяти или код команды.

CR – полный код текущей команды.

IP (Счетчик команд) – указывает на следующую команду.

SP (Указатель стека) – адрес вершины стека.

AR – хранит адрес ячейки памяти или команды.

АЛУ (Арифметико-логическое устройство):

Выполняет операции: сложение, логическое умножение, инверсия, инкремент.

Работает с AC и DR, результат записывается в AC.

Регистр переноса (C) – 1-битный, признак выхода за границы разрядной сетки для беззнакового представления числа

2) Адресные пространства
Память: 2048 ячеек × 16 бит.

Первые 16 ячеек (000–00F) – системные (прерывания, индексные регистры).

3) Система команд БЭВМ
Команды делятся на три группы:

Адресные команды – работают с памятью (чтение/запись по указанному адресу).

Безадресные (регистровые) команды – выполняют операции без обращения к памяти (например, сдвиги, инкремент).

Команды ввода-вывода – обмен данными с внешними устройствами.

4) Форматы команд (КАРТИНКА)
Адресные команды содержат:

Код операции.

Адрес операнда.

Безадресные команды содержат только код операции.

5) Машинные циклы
Выполнение команды состоит из тактовых импульсов, управляемых ГТИ (Генератором тактовых импульсов).

Цикл команды включает несколько машинных циклов:

Выборка команды (чтение из памяти в CR).

Выборка адреса (если команда адресная).

Выборка операнда (чтение данных из памяти).

Исполнение (выполнение операции).

Прерывание (если требуется).
-------------------------------------------------------------------------------------------------------------------------------------------------------
10. Организация вычислений в БЭВМ. Сдвиги, арифметические и логические операции. Цикл выборки команды
1) Представление чисел в БЭВМ
Целые без знака (16 бит):

Диапазон: 0 – 65 535.

Целые со знаком (дополнительный код):

Отрицательные числа представляются инверсией и добавлением 1.

Упрощает выполнение арифметических операций.

2) Арифметические операции
Сложение (ADD) – выполняется для чисел со знаком и без знака.

Инкремент (INC) – увеличение AC на 1.

Декремент (DEC) – уменьшение AC на 1.

Вычитание – реализуется через сложение с дополнительным кодом.

Умножение и деление – отсутствуют в АЛУ, выполняются программно.

3) Логические операции
Логическое И (AND) – побитовая операция:

Результат 1 только если оба бита 1.

Позволяет маскировать или очищать биты.

Инверсия (NOT) – побитовое отрицание.

4) Операции сдвига
Циклические сдвиги (ROL, ROR) – биты аккумулятора и регистра переноса (C) сдвигаются в кольце:

ROL – влево.

ROR – вправо.

Арифметический смысл:

Сдвиг влево = умножение на 2.

Сдвиг вправо = деление на 2.

5) Цикл выборки команды
IP → BR, AR – передача адреса команды.

BR + 1 → IP – подготовка к следующей команде.

MEM(AR) → DR – чтение команды из памяти.

DR → CR – загрузка команды в регистр команд.

Определение типа команды (адресная, безадресная, ввод-вывод).

Выполнение безадресных команд и команд ввода-вывода (если применимо).
-------------------------------------------------------------------------------------------------------------------------------------------------------
11. Организация массивов данных. Режимы адресации. Цикл выборки адреса и операнда БЭВМ

1) Символьные и строковые данные в БЭВМ:
Символьные данные представляются в БЭВМ как 8-разрядные знаковые числа в определённой кодировке. Поскольку ячейки памяти и аккумулятор в БЭВМ двухбайтовые, в одну ячейку можно поместить до 2 символов. Строковые данные формируются как массив символьных данных.

2) Типы массивов в БЭВМ:

Массив с указанием количества элементов:

Используется индексная ячейка, содержащая адрес первого элемента.

Количество обрабатываемых ячеек может храниться в дополнительном коде в отдельной ячейке или в первом элементе массива (который затем преобразуется в доп. код и обрабатывается через LOOP).

Массив со стоп-символом:

Адрес первого элемента хранится в индексной ячейке.

Массив обрабатывается поэлементно до встречи заданного стоп-символа.

3) Режимы адресации и цикл выборки адреса:
Основные режимы адресации в БЭВМ:

Прямая абсолютная (ADD 0A / $L):
CR → DR, DR → AR; MEM(AR) → DR

Косвенная относительная (ADD (L)):
CR(0..7) → BR, BR + IP → AR, MEM(AR) → DR, DR → AR; MEM(AR) → DR

Косвенная автоинкрементная (ADD (L)+):
CR(0..7) → BR, BR + IP → AR, MEM(AR) → DR, DR + 1 → DR, DR → MEM(AR), DR - 1 → DR, DR → AR; MEM(AR) → DR

Косвенная автодекрементная (ADD -(L)):
CR(0..7) → BR, BR + IP → AR, MEM(AR) → DR, DR - 1 → DR, DR → MEM(AR), DR → AR; MEM(AR) → DR

Со смещением (ADD &N / (SP+N)):
CR(0..7) → BR, BR + SP → DR, DR → AR; MEM(AR) → DR

Прямая относительная (ADD L / (IP+N)):
CR(0..7) → BR, BR + IP → DR, DR → AR; MEM(AR) → DR

Прямая загрузка (ADD #N):
CR(0..7) → BR, BR → DR

4) Цикл выборки операнда:
После определения адреса выполняется:
DR → AR, MEM(AR) → DR
-------------------------------------------------------------------------------------------------------------------------------------------------------
12. Управление вычислительным процессом в БЭВМ. Команды ветвлений,
цикл исполнения команды LOOP. (+ картинка)

В базовой ЭВМ управление последовательностью выполнения команд осуществляется с помощью:

Команд перехода (BCS, BPL, BMI, BEQ, BR)

Команды "Приращение и пропуск" (LOOP)

Команды "Останов" (HLT)

Организация ветвлений:
Команды перехода изменяют содержимое IP, помещая в него адрес, определяемый адресной частью команды. При этом они не изменяют содержимое аккумулятора и регистра переноса.

Организация циклов:
Для создания циклических программ используются:

Команды перехода

Команда LOOP (для циклов с счетчиком), которая:

Увеличивает на 1 содержимое адресуемой ячейки памяти

В зависимости от знака результата:

Если < 0 - выполняет следующую команду

Если ≥ 0 - пропускает следующую команду (выполняет команду через одну)
-------------------------------------------------------------------------------------------------------------------------------------------------------
13. Подпрограммы в БЭВМ. Цикл исполнения команд перехода и возврата
из подпрограммы. Стек, передача параметров. Позиционно-независимый
код. Загрузчик и библиотеки. (+картика)

1. Основные понятия подпрограмм
В БЭВМ для выделения повторяющихся фрагментов кода используются подпрограммы. Их реализация основана на:

Команде CALL (вызов подпрограммы)

Команде RET (возврат из подпрограммы)

2. Механизм работы подпрограмм
Вызов подпрограммы:

Команда CALL M передает управление на адрес M+1

Адрес возврата сохраняется в указанной ячейке

Возврат из подпрограммы:

Осуществляется командой RET

Восстанавливается адрес следующей команды после вызова

3. Организация стека
Хотя в БЭВМ нет аппаратной реализации стека, его можно эмулировать:

Используется область памяти

Указатель стека (SP) отслеживает текущую вершину

Основные операции:

PUSH: --SP, затем запись

POP: чтение, затем SP++

4. Передача параметров
В БЭВМ параметры можно передавать:

Через аккумулятор (регистры)

Через адресуемые ячейки памяти

5. Особенности реализации
Подпрограммы должны начинаться с сохранения адреса возврата

6. Практические аспекты
Подпрограммы упрощают структуру программы

Позволяют избежать дублирования кода
-------------------------------------------------------------------------------------------------------------------------------------------------------
14. Организация ввода-вывода в вычислительных системах. Инициация
обмена, передача информации и завершение обмена. Драйверы. (+картинка)
1. Основные принципы организации
Ввод-вывод (I/O) в вычислительных системах организуется через:

Шину ВУ (внешних устройств), включающую:

Шину данных

Шину управления

Шину адреса

Контроллеры ВУ, которые служат посредниками между процессором и устройствами

2. Роль драйверов
Драйверы - это специальные программы, обеспечивающие:

Взаимодействие между процессором, ОЗУ и ВУ

Знание специфики работы конкретных устройств

Реализацию трех этапов обмена:

Инициация обмена

Передача данных

Завершение обмена

3. Этапы обмена данными
3.1. Инициация обмена

Синхронный: обмен начинается в строго определенный момент

Асинхронный: обмен начинается по сигналу готовности устройства

С прерываниями: устройство инициирует прерывание для начала обмена (Отличие от асинхронного обмена состоит в том, что
процессор сразу же приступает к обработке прерывания, то есть к обмену с ВУ, в
то время как при асинхронном обмене процессор, получив готовность не обязан
действовать в этот же момент.)

3.2. Передача данных

Синхронная: данные передаются без дополнительных подтверждений

Асинхронная: требует подтверждения получения каждого блока данных

3.3. Завершение обмена

Синхронное: немедленное уведомление о завершении

Асинхронное: уведомление может прийти с задержкой

4. Методы ввода-вывода
4.1. Программно-управляемый

Используется для небольших объемов данных

Полностью контролируется процессором через драйверы

4.2. Аппаратно-управляемый (DMA)

Используется для больших объемов данных

Контроллер DMA управляет передачей напрямую в память

Процессор освобождается от участия в передаче

5. Особенности реализации
Шины данных и управления могут мультиплексироваться

Контроллеры ВУ решают проблему несоответствия скоростей процессора и устройств.
-------------------------------------------------------------------------------------------------------------------------------------------------------
15. Организация ввода-вывода в БЭВМ. Устройства ввода-вывода,
команды.(+картинка)

Организация ввода-вывода в БЭВМ
В БЭВМ поддерживаются два основных режима передачи данных между процессором и внешними устройствами (ВУ):

Программно-управляемый ввод-вывод

Управляемый прерываниями ввод-вывод

Прямой доступ к памяти (DMA) не реализован из-за отсутствия соответствующего контроллера в архитектуре БЭВМ.

1. Программно-управляемый ввод-вывод
Принцип работы:

Процессор непосредственно управляет передачей данных, проверя состояние ВУ и выполняя обмен через регистры.

Перед передачей процессор должен ожидать готовности устройства (опрашивать статусный регистр).

Недостатки:

Простой процессора во время ожидания готовности ВУ (холостой цикл опроса).

Низкая эффективность при работе с медленными устройствами.

Преимущества:

Простота реализации (не требует сложных механизмов прерываний).

2. Управляемый прерываниями ввод-вывод
Принцип работы:

ВУ само инициирует передачу данных, отправляя сигнал прерывания.

Процессор не опрашивает устройство вручную, а выполняет полезную работу, пока ВУ не будет готово.

Недостатки:

Требует обработчика прерываний, что усложняет программирование.

Незначительные накладные расходы на переключение контекста.

Преимущества:

Высокая эффективность (процессор не простаивает в ожидании).

Подходит для асинхронных событий (например, ввод с клавиатуры).

Регистры контроллера ВУ в БЭВМ
SR (Status Register, 1 бит)

0 — устройство не готово.

1 — готово к обмену.

При чтении (IN) бит готовности находится в 6-м разряде аккумулятора (01000000).

MR (Management Register, 4 бита)

Содержит номер вектора прерывания и бит разрешения прерываний.

DR (Data Register, 8 бит)

Через него передаются данные.

При чтении (IN) данные помещаются в младший байт аккумулятора.
-------------------------------------------------------------------------------------------------------------------------------------------------------
16. Организация асинхронного обмена в БЭВМ. Пример программы.
Временные издержки асинхронного обмена

ВЕСЬ ОТВЕТ НА КАРТИНКЕ

-------------------------------------------------------------------------------------------------------------------------------------------------------
17. Организация прерываний в БЭВМ. Вектора прерываний, контроллер
прерывания

ВЕСЬ ОТВЕТ НА КАРТИНКЕ

-------------------------------------------------------------------------------------------------------------------------------------------------------
18. Организация обмена по прерыванию программы в БЭВМ. Пример
программы. Цикл прерывания + картинка

Этот способ обмена используется при работе с низкоскоростными внешними устройствами (ВУ) или когда момент передачи данных заранее неизвестен. Обмен инициируется сигналом от ВУ. Для его реализации выполняется аппаратная проверка наличия запроса прерывания (сигнала готовности).

После завершения выполнения текущей команды (кроме EI, DI и HLT) процессор проверяет наличие запроса прерывания. Если прерывания запрещены или сигнала нет, выполняется следующая команда. В противном случае:

Прерывания запрещаются.

Содержимое счетчика команд (СК) сохраняется в ячейку 000.

Управление передается команде из ячейки 001, с которой начинается программа обработки прерываний.

Программа обработки прерываний сохраняет:

содержимое регистра A в ячейку SAVED_A,

содержимое регистра C в ячейку SAVED_C.

Таким образом, минимальный контекст прерванной программы хранится в ячейках 000, SAVED_A и SAVED_C. Далее происходит:

определение источника прерывания,

переход к подпрограмме работы с соответствующим ВУ,

передача данных,

сброс флага готовности ВУ.
-------------------------------------------------------------------------------------------------------------------------------------------------------

19. Понятие многоуровневой ЭВМ. Понятие и пример программы на разных
уровнях + картинка

Многоуровневая ЭВМ — это вычислительная система, поддерживающая несколько уровней языков программирования, где каждый уровень воспринимается пользователем как отдельная виртуальная машина. Нижние уровни ближе к аппаратуре (машинные команды, микропрограммы), а верхние — более абстрактные (алгоритмические языки, прикладные программы).

Примеры программ на разных уровнях:
Уровень прикладных программ (Excel)

Пользователь вводит формулу X = Y + Z.

Excel преобразует её в команды, понятные нижележащим уровням.

Уровень алгоритмических языков (Java)

java
int x = y + z;
Компилятор Java переводит этот код в машинные команды.

Язык ассемблера

asm
LD Y  
ADD Z  
ST X  
HLT  
Ассемблер конвертирует мнемоники в машинный код.

Машинный код

text
A229 (LD Y)  
4230 (ADD Z)  
E228 (ST X)  
0100 (HLT)  
Процессор выполняет эти команды напрямую.

Микропрограммный уровень

Микрокоманды управляют аппаратурой (например, сложение в АЛУ).

Пример микрокоманды:
-------------------------------------------------------------------------------------------------------------------------------------------------------
20. Микропрограммный уровень БЭВМ. Структура МПУ. Форматы
микрокоманд + картинка

Микропрограммное управление (МПУ) в БЭВМ реализует выполнение машинных команд через последовательность микроопераций.

Структура МПУ:
Память микрокоманд (ПМК) — хранит микропрограммы (обычно в ПЗУ).

Счетчик микрокоманд (СчМК) — указывает адрес следующей микрокоманды.

Регистр микрокоманд (РМК) — хранит текущую микрокоманду.

Типы микрокоманд:
Операционные (ОМК)

Управляют вентильными схемами процессора.

Пример: открытие шины данных для записи в регистр.

Управляющие (УМК)

Проверяют условие (например, значение флага).

Если условие истинно, загружают новый адрес в СчМК, иначе инкрементируют его.

Форматы микрокоманд:
Горизонтальные — длинные, управляют множеством сигналов напрямую.

Вертикальные — компактные, используют кодировку полей (дешифраторы преобразуют их в управляющие сигналы).

Пример работы МПУ:

СчМК выбирает микрокоманду из ПМК.

Она загружается в РМК.

Если это УМК, проверяется условие (например, флаг нуля).

Если условие выполнено, СчМК загружает новый адрес.

Иначе СчМК увеличивается на 1.

Если это ОМК, выполняются микрооперации (например, сложение в АЛУ).

Экономия памяти:
Вертикальные микрокоманды сокращают объём ПМК за счёт кодирования, но требуют дешифраторов.
-------------------------------------------------------------------------------------------------------------------------------------------------------
21. Структура и принципы работы арифметико-логического устройства и
коммутатора. Регистр состояния БЭВМ

Арифметико-логическое устройство (АЛУ) выполняет операции над операндами АC и DR, результат которых помещается в аккумулятор. Оно поддерживает все арифметические, логические команды БЭВМ, а также вспомогательные операции (например, инкремент содержимого СК).

Обратный код входных сигналов АЛУ формируется с помощью инверторов, которые заменяют все 0 на 1 и наоборот.

Сложение реализуется стандартным сумматором, а логическое умножение — вентильной схемой, на входы которой подаются коды операндов, а на выходе формируется результат.

Для организации ветвлений в микропрограмме используется регистр состояния (РС), объединяющий однобитовые признаки результата и служебные биты состояния ЭВМ.

Вентильные схемы — это электронные ключевые схемы, управляющие передачей данных между регистрами и шинами. Они имеют два входа: информационный и управляющий.
-------------------------------------------------------------------------------------------------------------------------------------------------------
22. Микропрограммное управление вентильными схемами. Схема
управления. Интерпретатор БЭВМ

1. Работа регистра микрокоманд (MR)

В каждом такте содержимое памяти микрокоманд передается в 40-разрядный регистр MR.

Младшие 16 разрядов (общая часть для всех микрокоманд) сразу подаются на управляющие вентили.

2. Анализ бита 39 (код операции)

Если бит 39 = 0 (операционная микрокоманда):

Инвертор преобразует 0 в 1, открывая вентиль ОМК.

Оставшиеся разряды передаются на управляющие вентили.

Если бит 39 = 1 (управляющая микрокоманда):

Открывается вентиль УМК.

Младшие 8 бит MR (поле выбора проверяемого бита) сравниваются с 8 битами от коммутатора через 8 вентилей (ромбики).

Результат сравнения поступает на схему ИЛИ, затем на обратный XOR (дает 1, если входы совпали).

Второй вход XOR — бит 32 («поле сравнения»).

3. Три сценария работы:

Случай 1: XOR выдал 1 (входы совпали).

Адрес перехода записывается в MR (если он ненулевой).

Проверка через инвертор в «красной картошке» (если адрес ≠ 0 → запись в MR).

Случай 2: XOR выдал 0 (нет совпадения).

Инвертор в «красной картошке» преобразует 0 в 1 → MR инкрементируется (+1).

Запись адреса не происходит.

Случай 3: Изначально операционная микрокоманда (бит 39 = 0).

Аналогично Случаю 2: MR инкрементируется, нули не записываются.
-------------------------------------------------------------------------------------------------------------------------------------------------------
23. Архитектура ЭВМ. Гарвардская и фон-Неймановская архитектура.
Организация обмена архитектуры ЭВМ с использованием шин

Гарвардская архитектура
Основные особенности:

Физическое разделение памяти команд и памяти данных

Отдельные шины для каждой памяти

Возможность параллельной выборки команд и данных

Более высокая производительность за счет совмещения операций

Принстонская архитектура (фон Неймана)
Основные особенности:

Единая память для команд, данных и стека

Общая системная шина для передачи команд и данных

Гибкое распределение памяти под текущие задачи
-------------------------------------------------------------------------------------------------------------------------------------------------------
24. Архитектура многопроцессорных ЭВМ. Системный коммутатор.
Архитектуры UMA и NUMA

Первоначально, когда процессоры стали превосходить по скорости память, архитектура строилась вокруг процессора как центрального звена. Память и контроллеры ввода-вывода работали на разных скоростях, но для упрощения системы стали использовать общую шину для памяти и контроллеров. Дополнительно упростили конструкцию, объединив шину адреса и шину данных, передавая адрес и данные по одним и тем же проводам в разные такты.

Это привело к появлению архитектуры UMA (Uniform Memory Access). В UMA все процессоры имеют равный и одновременный доступ к общей памяти. Системная шина служит общим каналом обмена данными между процессорами, памятью и контроллерами. Однако при добавлении второго процессора возникли проблемы с синхронизацией и переключением контекстов. А при попытке добавить третий процессор производительность упала из-за перегрузки шины, так как только один процессор мог использовать её в каждый момент времени.

Решение нашлось в использовании системного коммутатора, который обеспечил полноценную параллельную работу процессоров. Каждый процессор получил возможность независимо обращаться к памяти или устройствам, устранив узкое место в виде общей шины. Быстрые и медленные устройства были разделены, а высокоскоростные компоненты подключались напрямую к коммутатору.

Дальнейшим развитием стала архитектура NUMA (Non-Uniform Memory Access), предназначенная для систем с большим количеством процессоров (100+). В NUMA каждый процессор имеет свою локальную память и кэш, а все процессорные узлы соединены через коммутатор. Память остается общей, но доступ к локальной памяти быстрее, чем к удаленной. Операционная система старается размещать данные процесса в локальной памяти его процессора, чтобы минимизировать задержки.
-------------------------------------------------------------------------------------------------------------------------------------------------------
25. Структура современных процессоров. Окружение процессора. CISC,
RISC, VLIW

CISC (Complex Instruction Set Computing)
Историческая архитектура (например, Intel x86), сохраняющая обратную совместимость с прошлыми поколениями.

Характеризуется:

Большим количеством команд разного формата и длины.

Разнообразными режимами адресации.

Сложной кодировкой инструкций.

Недостатки:

Параллельное выполнение команд затруднено из-за их неоднородности.

Сложная структура процессора увеличивает стоимость производства.

Преимущество: упрощение программирования на ассемблере.

RISC (Reduced Instruction Set Computing)
Упрощенная архитектура с фиксированным форматом команд.

Основные особенности:

Все команды одинаковой длины.

Обращение к памяти только через команды загрузки/записи.

Большинство операций выполняется в режиме «регистр-регистр».

Преимущества:

Более простая и дешевая реализация процессора.

Лучшая масштабируемость для параллельного выполнения.

Недостаток: требует перекомпиляции программ, написанных под CISC.

VLIW (Very Long Instruction Word)
Архитектура, основанная на RISC, но с упаковкой нескольких операций в одну длинную команду.

Особенности:

Параллельное выполнение операций определяется на этапе компиляции.

Компилятор группирует независимые команды в один пакет.

Преимущество: эффективное использование вычислительных ресурсов без аппаратного планирования.

Недостаток: высокая зависимость от оптимизации компилятора.

Структура современного процессора (картинка)
-------------------------------------------------------------------------------------------------------------------------------------------------------
26. Адресуемая память, организация и временные диаграммы.
Конструктивные особенности современной памяти. + картинка

Организация памяти
Современная память разбивается на банки, каждый из которых представляет собой матрицу ячеек.

Адрес разделяется на две части: номер строки (Row) и номер столбца (Column).

Мультиплексор выбирает нужный столбец из выбранной строки и передает данные на выход.

Временные диаграммы и управление доступом
Сигналы управления:

RAS (Row Address Strobe) – выбор строки.

CAS (Column Address Strobe) – выбор столбца.

W/R (Write/Read) – определяет операцию записи или чтения (внутренний сигнал памяти).

Output Enable (OE) – разрешение вывода данных.

Временные параметры:

Tд (время доступа) – задержка между подачей адреса и появлением данных.

Tв (время восстановления) – пауза перед следующим обращением.

Мультиплексирование адреса
Адрес передается не целиком, а по частям: сначала строка, затем столбец (по одной шине).

Это снижает количество необходимых контактов, но немного увеличивает задержку.

Использование регистров позволяет ускорить инкремент адреса.

Контруктивные особенности современной памяти
Burst Mode (пакетный режим)

При запросе одного адреса возвращается блок данных из нескольких соседних ячеек.

Уменьшает количество обращений к памяти.

SPD (Serial Presence Detect)

Микросхема на модуле памяти, хранящая параметры (частоту, тайминги).

Процессор считывает SPD для корректной настройки.

Расслоение памяти (Interleaving)

Чередование адресов между несколькими модулями памяти.

Позволяет параллельно обрабатывать запросы (например, четные и нечетные адреса в разных банках).

Увеличивает пропускную способность.
-------------------------------------------------------------------------------------------------------------------------------------------------------
27. Память, ориентированная на записи (блочная память). Организация
дисковой памяти и памяти на магнитных лентах.

Блочная память (организация)
Адресное пространство разбивается на блоки последовательных адресов.

Каждый блок обслуживается отдельным банком памяти.

Позволяет эффективно управлять доступом и повышает параллелизм.

Устройство жестких дисков (HDD)
Состоят из блинов (пластин) с магнитным покрытием.

Каждая пластина имеет две рабочие поверхности (верхнюю и нижнюю).

Головки чтения/записи перемещаются над поверхностями.

Данные организованы в дорожки (концентрические круги) и сектора.

Структура сектора:

Преамбула – служебная информация для синхронизации.

Данные – полезная информация.

ECC (Error Correction Code) – код коррекции ошибок (Хэмминга или Рида-Соломона).

Межсекторный интервал – разделитель между секторами.

Время доступа к данным на диске:

Tпозиционирования – время перемещения головки к нужной дорожке.

Tповорота – время ожидания нужного сектора под головкой.

Среднее время доступа учитывает случайное расположение данных.

Особенности работы:

Линейная скорость чтения/записи зависит от радиуса дорожки (внешние дорожки быстрее).

Ленточные накопители
Используются для долговременного хранения и резервных копий из-за низкой стоимости.

Принцип работы:

В классических устройствах лента протягивается мимо неподвижной головки.

В современных системах головка вращается (наклонная запись), что увеличивает скорость.

Недостаток: большое время доступа из-за последовательного доступа.

Преимущество: высокая ёмкость и дешевизна хранения данных.
-------------------------------------------------------------------------------------------------------------------------------------------------------
28. Характеристики запоминающих устройств. Пирамида памяти

СМОТРИ КАРТИНКУ
-------------------------------------------------------------------------------------------------------------------------------------------------------
29. Ассоциативная память, Кэш-память. Влияние промахов кэш-памяти на
производительность

Ассоциативная память
Работает по принципу поиска данных не по адресу, а по содержимому.

Каждая ячейка содержит:

Данные.

Схему сравнения (компаратор) – проверяет соответствие заданному признаку.

Регистр ассоциативного признака – хранит искомое значение для сравнения.

При совпадении данные передаются в выходной регистр.

Недостаток: высокая стоимость из-за большого числа компараторов.

Кэш-память
Высокоскоростная буферная память, ускоряющая доступ к часто используемым данным.

Принцип работы:

Процессор сначала проверяет наличие данных в кэше.

Если данные есть (попадание), они считываются быстро.

Если данных нет (промах), происходит обращение к основной (более медленной) памяти.

Структура кэш-памяти
Кэш-линия – минимальная единица хранения (обычно 64 байта в x86).

Состав записи в кэше:

Блок данных – копия информации из ОЗУ.

Тег – часть адреса, указывающая, какая область ОЗУ скопирована.

Бит актуальности – показывает, действительны ли данные.

Адрес делится на части:

Тег – определяет, к какой области ОЗУ относится строка.

Индекс – указывает на конкретную строку в кэше.

Влияние промахов кэша на производительность
Промах кэша – ситуация, когда нужные данные отсутствуют в кэше.

Последствия:

Процессор вынужден ждать данные из основной памяти (задержка в десятки-сотни тактов).

Снижение общей производительности системы.

Способы уменьшения промахов:

Увеличение размера кэша.

Оптимизация алгоритмов (локальность данных).

Использование многоуровневого кэша (L1, L2, L3).
-------------------------------------------------------------------------------------------------------------------------------------------------------
30. Предназначение и организация виртуальной памяти. Сегментностраничная организация. Устройство управления памятью (MMU), буфер
трансляции (TLB).

Предназначение виртуальной памяти
Позволяет выполнять программы, требующие больше ОЗУ, чем физически доступно.

Обеспечивает изоляцию процессов, защиту памяти и эффективное управление ресурсами.

Реализуется через страничную и сегментную организацию.

Страничная организация
Физическая и виртуальная память разбивается на страницы фиксированного размера (например, 4 КБ).

Виртуальный адрес состоит из:

Номера страницы (индекс в таблице страниц).

Смещения внутри страницы.

Преобразование адреса:

TLB (Translation Lookaside Buffer) – быстрый кэш трансляций (ассоциативная память).

Если страница не найдена в TLB (TLB miss), происходит обращение к таблице страниц в ОЗУ.

Если страница выгружена на диск (page fault), ОС загружает её обратно.

Преимущества:

Простота управления (фиксированный размер страниц).

Эффективная защита памяти.

Недостатки:

Внутренняя фрагментация (неполное использование страниц).

Сегментная организация
Память делится на сегменты переменного размера (например, код, данные, стек).

Виртуальный адрес состоит из:

Номера сегмента (указатель в таблице сегментов).

Смещения внутри сегмента.

Преобразование адреса:

Физический адрес = база сегмента + смещение.

Преимущества:

Логическое разделение данных (удобно для программирования).

Возможность разделяемых библиотек (один сегмент в памяти для нескольких процессов).

Недостатки:

Внешняя фрагментация (сложность управления свободной памятью).

Медленнее страничной организации из-за сложности трансляции.

Устройство управления памятью (MMU)
Функции:

Преобразование виртуальных адресов в физические.

Проверка прав доступа (чтение/запись/исполнение).

Работа MMU:

Принимает виртуальный адрес от процессора.

Проверяет TLB (быстрый кэш трансляций).

При TLB miss обращается к таблице страниц/сегментов (в ОЗУ).

Обновляет TLB при успешном преобразовании.

Буфер ассоциативной трансляции (TLB)
Назначение:

Кэш трансляций виртуальных адресов в физические.

Уменьшает задержки при обращении к памяти.

Принцип работы:

TLB hit – адрес найден, доступ к памяти продолжается.

TLB miss – требуется поиск в таблице страниц (page walk).

Влияние на производительность:

Частые TLB misses снижают скорость работы (дополнительные обращения к ОЗУ).

Оптимизация: увеличение размера TLB, улучшение локальности обращений.
-------------------------------------------------------------------------------------------------------------------------------------------------------
31. Сетевые технологии, Понятие сети ЭВМ, классификация компьютерных
сетей. Сообщение и пакет. Модель взаимодействия открытых систем.

Понятие сети ЭВМ
Сеть ЭВМ – это соединение двух и более компьютеров для совместного использования ресурсов (процессоров, памяти, данных и периферийных устройств).

Классификация сетей
По территориальному охвату:

Локальные (LAN) – в пределах здания (до 1 км).

Региональные (MAN) – в пределах города.

Национальные – в пределах страны.

Глобальные (WAN) – международные (например, Интернет).

По доступности:

Корпоративные – закрытые сети организаций.

Общедоступные – открытые для всех (например, публичный Wi-Fi).

По топологии:

Звезда – все узлы подключены к центральному серверу (простота, но уязвимость при отказе сервера).

Общая шина – компьютеры подключены к одной линии связи (дешево, но возможны коллизии).

Кольцо – данные передаются по цепочке (высокая живучесть при единичном обрыве).

Полносвязная – каждый узел соединен со всеми (максимальная надежность, но дорого).

Сообщение и пакет
Сообщение – данные, предназначенные для передачи.

Пакет – структурированный блок данных, включающий:

Заголовок (адреса, контрольная сумма).

Полезную нагрузку (передаваемые данные).

Модель взаимодействия открытых систем (OSI)
Уровень	Тип данных (PDU)	Функции	Примеры протоколов
7. Прикладной	Данные	Доступ к сетевым службам	HTTP, FTP, SMTP, WebSocket
6. Представления	Данные	Кодирование, шифрование, сжатие	ASCII, JPEG, TLS
5. Сеансовый	Данные	Управление сеансом связи	RPC, PAP, L2TP
4. Транспортный	Сегменты	Гарантированная доставка, контроль потока	TCP, UDP, SCTP
3. Сетевой	Пакеты	Маршрутизация, логическая адресация	IP, ICMP, BGP
2. Канальный	Кадры (frames)	Физическая адресация, обнаружение ошибок	Ethernet, Wi-Fi, ARP
1. Физический	Биты	Передача сигналов по среде	Витая пара, оптоволокно

Принцип работы:

Данные проходят сверху вниз (от приложения к физическому уровню) при отправке.

Принимающая сторона обрабатывает их снизу вверх (восстанавливая исходное сообщение).
-------------------------------------------------------------------------------------------------------------------------------------------------------
33. Модель TCP/IP: выделение адресов (DHCP), сервисы имен, транспортный и прикладной уровни.

TCP/IP позволяет компьютерам автоматически получать IP-адрес, маску, шлюз и DNS-сервер через DHCP. Клиент отправляет широковещательный запрос DHCPDISCOVER, чтобы найти сервер. В ответ сервер предлагает адрес (DHCPOFFER). Если клиент согласен, он отправляет DHCPREQUEST (тоже широковещательно), уведомляя другие серверы, что их услуги не нужны. Сервер резервирует IP и подтверждает его использование пакетом DHCPACK.

Для удобства в TCP/IP используются доменные имена, преобразуемые в IP-адреса через DNS.

Транспортный уровень обеспечивает:

Установку и управление сеансами связи (в TCP). Перед передачей данных устанавливается соединение, подтверждающее готовность получателя.

Сегментацию данных (разбиение на части и сборку после получения).

Идентификацию приложений через номера портов. Каждое приложение регистрирует порт, и транспортный уровень передает данные соответствующей программе.

Прикладной уровень включает протоколы для доступа к сетевым ресурсам (файлам, принтерам, веб-страницам) и взаимодействия (например, электронная почта). Данные на этом уровне называются сообщениями.
--------------------------------------------------------------------------------------------------------------------
34. Интерфейсы ввода-вывода. Контроллеры внешних устройств. Уровни стандартизации, сопряжение с системной шиной, циклы обмена. Регистры контроллера.

Интерфейсы ввода-вывода

Интерфейсы определяют параметры обмена данными: частоту, способ кодирования, набор команд, формат данных и последовательность операций. Они требуют аппаратной и программной реализации, а также точной стандартизации, чтобы обе стороны взаимодействия правильно интерпретировали процесс обмена.

Уровни стандартизации

Логический – алгоритмы взаимодействия, понятные системе.

Электрический – параметры сигналов (напряжение, ток).

Конструктивный – физическая реализация разъемов и портов.

Сопряжение с системной шиной

Контроллеры внешних устройств (ВУ) обеспечивают два уровня взаимодействия:

Процессор ↔ Контроллер

Контроллер ↔ Внешнее устройство

Обмен данными может происходить в двух режимах:

Программно-управляемый (асинхронный или по прерываниям).

Прямой доступ к памяти (DMA).

Циклы обмена

Операция вывода:

Процессор выставляет адрес ВУ на шину адреса, данные – на шину данных.

Сигнал «Вывод в ВУ» активирует контроллер, который принимает данные и передает их устройству.

После завершения контроллер сигнализирует «Готовность ВУ», и процессор снимает управляющие сигналы.

Операция ввода:

Процессор выставляет адрес ВУ и активирует сигнал «Ввод из ВУ».

Контроллер считывает данные из устройства, передает их на шину данных и подтверждает операцию сигналом «Готовность ВУ».

Процессор принимает данные и завершает цикл.

Регистры контроллера

Контроллер содержит несколько регистров (портов ввода-вывода), каждый из которых имеет свой адрес:

Регистр входных данных (только чтение) – хранит данные от ВУ.

Регистр выходных данных (только запись) – хранит данные для передачи в ВУ.

Регистр состояния (чтение) – содержит статус устройства (готовность, ошибки).

Регистр управления (запись) – принимает команды от процессора.
--------------------------------------------------------------------------------------------------------------------
35. Параллельная передача данных. Контроллеры параллельной передачи и приема.

Параллельная передача данных

Процесс асинхронного обмена данными с внешним устройством (ВУ) под управлением программы включает следующие этапы:

Проверка готовности ВУ

Процессор проверяет состояние регистра А2 контроллера.

Если ВУ готово к приему данных (в регистре А2 установлен логический 0), выполняется передача.

Если ВУ не готово, процессор повторяет проверку.

Передача данных

Данные передаются из шины данных системного интерфейса в регистр данных А1 контроллера, а затем в ВУ.

Одновременно с записью данных в А1 в регистр состояния и управления А2 записывается логическая 1, что формирует сигнал «Выходные данные готовы».

Подтверждение приема данных

ВУ, приняв данные, отправляет сигнал «Данные приняты», который обнуляет регистр А2.

Это приводит к:

Формированию сигнала «Готовность ВУ» для системного интерфейса.

Передаче признака готовности ВУ в процессор через одну из линий шины данных.

Организация контроллера
Регистр данных (А1) – временное хранение передаваемых данных.

Регистр состояния и управления (А2) – управляет сигналами «Выходные данные готовы» и «Данные приняты».

Логика управления выполняет:

Селекцию адресов регистров контроллера.

Прием и формирование управляющих сигналов.

Генерацию сигнала «Готовность ВУ».

Приемники шины адреса и приемопередатчики шины данных обеспечивают сопряжение контроллера с системным интерфейсом.
--------------------------------------------------------------------------------------------------------------------
36. Синхронные последовательные интерфейсы. Контроллеры последовательной передачи и приема

Организация передачи данных

Буферный регистр (А1)

Временное хранение 8-битного байта перед передачей

Запись активируется при значении "1" в регистре состояния (А2)

После записи регистр А2 сбрасывается в "0"

Сдвиговый регистр

Преобразует параллельные данные в последовательный поток

По каждому тактовому импульсу:

Сдвигает содержимое на 1 бит вправо

Передает текущий бит в линию "Данные"

Генерирует синхроимпульс в линии "Синхронизация"

Управление передачей

Счетчик отслеживает количество переданных бит

После передачи 8 бит (значение счетчика = 7):

Формируется сигнал "Загрузка" для нового байта

Регистр состояния А2 устанавливается в "1"

Счетчик сбрасывается для нового цикла передачи

Организация приема данных
Буферный регистр (А1)

Хранит принятый байт данных

Чтение возможно при значении "1" в регистре состояния (А2)

Сдвиговый регистр

Преобразует последовательный поток в параллельный формат

По каждому тактовому импульсу:

Сдвигает содержимое на 1 бит влево

Записывает новый бит из линии "Данные"

Управление приемом

Счетчик отслеживает количество принятых бит

После приема 8 бит:

Формируется сигнал "Запись" для сохранения байта

Регистр состояния А2 устанавливается в "1"

При чтении данных регистр А2 сбрасывается

Интерфейсные соединения
Линия "Данные" подключена к последовательному входу сдвигового регистра

Линия "Синхронизация" соединена с:

Управляющим входом "Сдвиг"

Входом счетчика тактовых импульсов

Состояние регистра А2 передается в систему для контроля готовности
--------------------------------------------------------------------------------------------------------------------
37. Асинхронный обмен. Принципы деления частоты, формат кадра

Основные принципы асинхронного обмена

Организация обмена

Интервал между командами передачи определяется внешним устройством (ВУ)

Контроллеры оснащаются регистром состояния, информирующим о готовности ВУ

Обмен данными происходит только при готовности устройства

Преимущества

Не требуется точное знание времени выполнения операций ВУ

Гарантированное завершение обработки данных перед следующим обменом

Недостаток

Простой вычислительной системы в период ожидания готовности ВУ

Проблемы синхронизации и их решение

Причина рассинхронизации

Различие тактовых частот передатчика и приемника

Возможные искажения или потеря данных

Метод решения - деление частоты

Исходная тактовая частота делится с коэффициентом (обычно степень двойки)

Увеличение области совпадения фаз и времени передачи

Повышение точности передачи данных

Реализация деления частоты

Использование T-триггера (счетного триггера) для деления на 2

Каскадное соединение T-триггеров для деления на степень двойки

Формат кадра передачи
Состав кадра:

Стартовые биты (определяют начало передачи)

Информационные биты (полезные данные)

Стоповые биты (завершение передачи)
--------------------------------------------------------------------------------------------------------------------
38. Контроллер передачи асинхронного последовательного интерфейса.

Инициализация передачи
Подготовка контроллера:

После завершения предыдущей передачи регистр состояния А2 устанавливается в "1"

Сигнал от А2:

Информирует процессор о готовности к приему нового байта

Блокирует генерацию импульсов сдвига (делитель частоты на 16)

Счетчик импульсов сдвига (mod 10) находится в нулевом состоянии

Выходной сигнал счетчика подготавливает цепь формирования сигнала загрузки

Процесс передачи данных

Начало передачи:

Процессор выполняет команду "Вывод":

Выставляет байт данных на шине

Активирует сигнал "Вывод"

В контроллере:

Байт записывается в буферный регистр А1

Регистр состояния А2 сбрасывается

Формируется сигнал "Загрузка"

Формирование кадра:

Данные загружаются в разряды 1-8 сдвигового регистра

В разряд 0 записывается стартовый бит (0)

В разряды 9-10 записываются стоповые биты (1)

Синхронизация передачи:

Активируется делитель частоты (деление на 16)

Импульс сдвига генерируется каждые 16 тактов

Процесс передачи битов
Передача стартового бита:

Линия "Данные" удерживается в "0" до первого импульса сдвига

Передача информационных битов:

Каждый импульс сдвига:

Изменяет состояние счетчика

Передает очередной бит на линию

Удерживает значение бита до следующего импульса

Завершение передачи:

После передачи второго стопового бита:

Счетчик импульсов сдвига обнуляется

Регистр состояния А2 устанавливается в "1"

Генерация импульсов сдвига блокируется

Линия "Данные" удерживается в "1" (стоповый бит)
--------------------------------------------------------------------------------------------------------------------
39. Контроллер приема асинхронного последовательного интерфейса

Инициализация приема

Начальное состояние:

Линия данных удерживает "1" (стоповый бит)

Делитель частоты заблокирован

Обнаружение старта передачи:

При появлении "0" (стартовый бит):

Снимается сигнал "Сброс" с делителя частоты

Начинается подсчет тактовых импульсов

Процесс приема данных

Синхронизация:

Первый контрольный сдвиг происходит после 8 тактов (середина битового интервала)

Последующие сдвиги - каждые 16 тактов

Прием битов:

Данные последовательно загружаются в сдвиговый регистр

После приема 9-го бита (8 информационных + стартовый):

Стартовый бит удаляется из регистра

В регистре остается информационный байт


Завершение приема
Фиксация данных:

При заполнении регистра:

Данные переписываются в буферный регистр

Триггер А2 устанавливается в "1" (сигнал готовности)

Обработка процессором:

По сигналу "Ввод":

Данные передаются из буфера в процессор

Триггер А2 сбрасывается

Подготавливается сигнал "Сброс" для следующего приема

--------------------------------------------------------------------------------------------------------------------
40. Организация прямого доступа к памяти. Контроллер ПДП

картинка
